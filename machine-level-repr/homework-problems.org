* 3.62 xx (20 min)

The code that follows shows an example of branching on an enumerated type value
in a switch statement. Recall that enumerated types in C are simply a way to
introduce a set of names having associated integer values. By default, the
values assigned to the names count from zero upward. In our code, the actions
associated with the different case labels have been omitted.

#+begin_src C
  /* Enumerated type creates a set of constants numbered 0 and upward */
  typedef enum {MODE_A, MODE_B, MODE_C, MODE_D, MODE_E} mode_t;

  long switch3(long* p1, long* p2, mode_t action)
  {
          long result = 0;
          switch(action) {
                  case MODE_E:
                          result = 27;
                          break;
                  case MODE_A:
                          result = *p2;
                          p2 = *p1;
                          break;
                  case MODE_B:
                          result = *p1;
                          result += *p2;
                          p2 = result;
                          break;
                  case MODE_C:
                          p1 = 59;
                          result = *p2;
                          break;
                  case MODE_D:
                          result = *p2
                          p1 = result;
                          result = 27;
                          break;
                  default:
                          result = 12;
                          break;
                  }
          return result;
  }
#+end_src

The part of the generated assembly code implementing the different actions is
shown in Figure 3.52. The annotations indicate the argument locations, the
register values, and the case labels for the different jump destinations. Fill
in the missing parts of the C code. It contained one case that fell through to
another -- try to reconstruct this.

#+begin_src asm
  # p1 in %rdi, p2 in %rsi, action in %edx
  .L8:                      # MODE_E
          movl  $27, %eax     # result = 27
          ret                 # break
  .L3:                      # MODE_A
          movq  (%rsi), %rax  # result = *p2
          movq  (%rdi), %rdx  # val = *p1
          movq  %rdx, %(rsi)  # p2 = val 
          ret                 # break
  .L5:                      # MODE_B
          movq  (%rdi), %rax   # result = *p1
          addq  (%rsi), %rax   # result += *p2
          movq  %rax,   (%rsi) # p2 = result
          ret                  # break
  .L6:                      # MODE_C
          movq  $59, (%rdi)    # p1 = 59
          movq  (%rsi), %rax   # result = *p2
          ret                  # break
  .L7:                      # MODE_D
          movq  (%rsi), %rax   # result = * p2
          movq  %rax, (%rdi)   # p1 = result
          movl  $27, %eax      # result = 27
          ret
  .L9:                      #default
          movl $12, %eax       # result = 12
          ret
#+end_src


* 3.68 xxx

In the following code, A and B are constants defined with #define

#+begin_src C
  typedef struct {
        int x[A][B]; /* Unknown contants A nd B */
        long y;
  } str1;

  typedef struct {
          char array[B];
          int t;
          short a[A];
          long u;
  } str2;

  void setVal(str1* p, str2* q)
  {
          long v1 = q->t;
          long v2 = q->u;
          p->y = v1+v2;
  }
#+end_src


Gcc generates the following code for setVal:

#+begin_src asm
  # void setVal(str1* p, str2* q)
  # p in %rdi, q in %rsi
  setVal:
          movslq  8(%rsi), %rax
          addq    32(%rsi), %rax
          movq    %rax, 184(%rdi)
          ret
#+end_src

What are the values of A and B? (The solution is unique)


B appears to be used to allocate an array of 8 chars.
This means that A is used to allocate and array of A*8 ints = 184

A * 8 = 184 / 4
A = (/ 184 32)5
A = 5
