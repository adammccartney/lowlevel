
* Problem sets for the Y86 simulator

Y86 is a hypothetical ISA created by the writers of the CSAPP book for edumacational purposes.

* Setting up the Y86 simulator
** Notes on installing the simulators
https://onestepcode.com/install-csapp-y86-64-processor-simulator/

You need to locate the shared libraries on the system where you are compiling.

#+begin_src shell
  sudo find / -iname libtk.so
  sudo find / -iname libtcl.so
#+end_src

The results need to be appended to the link directories listed in the makefile

#+begin_src shell
  TKLIBS=-L/usr/lib/x86_64-linux-gnu/ -ltk -ltcl
  TKINC=-isystem /usr/include/tcl8.6
#+end_src

** gcc flags

https://www.anycodings.com/1questions/1962402/fail-to-compile-the-y86-simulatur-csapp
gcc 10 changed the default from "-fcommon" to "-fno-common" 
#+begin_src shell
CFLAGS=-Wall -O1 -g -fcommon
LCFLAGS=-O1 -fcommon
#+end_src

** deprecated instructions

#+begin_src C
/* original */
interp->result = "some string";
/* replacement */
Tcl_SetResult(interp, "some string", TCL_STATIC);

/* original */
fprintf(stderr, "some string", sim_interp->result);
/* replacement */
fprintf(stderr, "some string", Tcl_GetStringResult(sim_interp));
#end_src



* Exercises

** 4.3
Write Y86 code to implement a recursive sum function rSum, based on the following C code:
#+begin_src C :tangle rSum/rSum.c  
      int rSum(int *Start, int Count)
      {
              if (Count <= 0) {
                      return 0;
                      }
              return *Start + rSum(Start+1, Count-1);
      }
#+end_src

#+begin_src shell
  c99 -S -m32 -fno-asynchronous-unwind-tables -fno-pie -o rSum.s rSum.c
#+end_src

Output:
#+begin_src asm
	.file	"rSum.c"
	.text
	.globl	rSum
	.type	rSum, @function
rSum:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	subl	$4, %esp
	cmpl	$0, 12(%ebp)
	jg	.L2
	movl	$0, %eax
	jmp	.L3
.L2:
	movl	8(%ebp), %eax
	movl	(%eax), %ebx
	movl	12(%ebp), %eax
	leal	-1(%eax), %edx      # Count-1
	movl	8(%ebp), %eax
	addl	$4, %eax
	subl	$8, %esp
	pushl	%edx
	pushl	%eax
	call	rSum
	addl	$16, %esp
	addl	%ebx, %eax
.L3:
	movl	-4(%ebp), %ebx
	leave
	ret
	.size	rSum, .-rSum
	.ident	"GCC: (Debian 10.2.1-6) 10.2.1 20210110"
	.section	.note.GNU-stack,"",@progbits
#+end_src



Converted to Y86:
Okay, so the trickiest thing to get my head around is the recursive step. 
Also, there seems to maybe be some compiler optimization magic happening that I'm not aware of,
particularly with the align stuff.

#+begin_src asm :tangle sim/y86-code/rSum.ys 
  /* $begin rSum-ys */

          # int rSum(int *Start, int Count)
  rSum:
          pushl  %ebp
          rrmovl %esp, %ebp
          pushl  %ebx
          subl   $4, $esp
          andl   $0, 12(%ebp)
          jg     Rec
          irmovl  $0, %eax
          jmp    End
  Rec:
          mrmovl 8(%ebp), %eax
          mrmovl (%eax), %eax
          mrmovl 12(%ebp), %ecx
          irmovl $-1, $ebx
          addl   %ebx, %edx    # Count-1
          irmovl $4, %ebx
          addl   %ebx, %eax    # Start+1
          pushl  %edx
          pushl  %eax
          call   rSum
          irmovl $16, %esp
          addl   %ebx, %eax
  End:
          mrmovl -8(%ebp), %eax
          irmovl $24, %esp
          popl   %ebp
          ret
#+end_src
