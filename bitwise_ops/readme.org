* Basic introduction

We want to make a few basic assertions about the nature of bitwise operations.
So, let's set up some numbers to play with. We'll look at a few fairly random
numbers in the range 0-255 for a start.

| decimal |  hex | binary     |
|---------+------+------------|
|      17 | 0x11 | 0b10001    |
|      19 | 0x13 | 0b10011    |
|      59 | 0x3b | 0b111011   |
|      85 | 0x55 | 0b1010101  |
|     255 | 0xFF | 0b11111111 |

So, let's turn 17 into 85!
#+begin_src C :tangle basics.c
  #include "stdio.h"
  int main(void)
  {
          /* Turn 17 into 85 using bitshift operations */
          unsigned x = 17;
          int p, n;
          p = 0x15;
          n = 2;
          x = (x << n) | p;
          printf("%d\n", x);
          return 0;
  }
#+end_src


* Exercises from K&R Section 2.9
** Exercise 2-6
Write a function **setbits(x,p,n,y)** that returns x with the n bits that begin
at position p set to the rightmost n bits of y, leaving the other bits
unchanged.

signature:
#+begin_src C
unsigned setbits(unsigned x, int p, int n, int y);
#+end_src

We're getting some of the way by finding out how to

set a mask for the rightmost n bits
#+begin_src C
  ~(~0 << n)
#+end_src

Then use an and operation to extract the bits
#+begin_src C
(y & ~(~0 << n))
#+end_src


So to recap what we want to do:

xxx...xnnnx...xxx x
yyy...........nnn y

xxx...x000x...xxx x
000...0nnn0...000 y
-----------------
xxx...xnnnx...xxx x

We know how to get the n's into the right position in y.
How do we clear the n bits in x?

In this example we want to clear all the bits but the two bits
at position 5
#+begin_src python
  p = 5
  n = 2
  x = 0b111111
  z = ~(~0 << 2) << (p+1-n))
#+end_src

#+begin_src python :tangle clearbits.py
  #!/usr/bin/python3
  import sys

  __doc__ = """clearbits: clear n bits starting at position p"""

  def clearbits(x, p, n):
      # possibly also: x ^ (~(~0 << n) << (p+1-n))
      return x & ~(~(~0 << n) << (p+1-n))

  if __name__ == '__main__':
      if (len(sys.argv) != 4):
          print(__doc__)
          print("usage: python3 clearbits <position> <numbits>")
      ret = clearbits(int(sys.argv[1]), int(sys.argv[2]), int(sys.argv[3]))
      print(ret)
#+end_src

If we want to check how the clearbits procedure has worked, we
can use this pipeline to check how the binary output would look.

#+begin_src shell
  res=$(python3 clearbits.py 255 3 2) && echo "obase=2;$res" | bc
#+end_src

** Exercise 2-7

Write a function src_C{invert(x,p,n)} that returns x with the n bits that
begin at position p inverted (i.e., 1 changed into 0 and vice versa), leaving
the others unchanged.

xxx...xnnnx...xxx
xxx...x101x...xxx
becomes
xxx...x010x...xxx

We can use a combination of getbits and setbits from previous excercises
#+begin_src python
  def getbits(x, p, n):
      return (x >> (p+1-n)) & ~(~0 << n)
#+end_src

getbits can be used to get the specific bits.
We can create a mask, of the same length n with all the n bits set to high.

#+begin_src python
  def mask_high(n):
      return ~(~0 << n)
#+end_src

Then we can use an exclusive or operation with the original to produce the
inverse.



** Exercise 2-8

Write a function src_C{rightrot(x,n)} that returns the value of the integer x
rotated to the right by n bits.

#+begin_src C
  /* 0b1001011 */
  rightrot(0x4b, 3)
#+end_src

1001011 -> 0111001

Grab rightmost n bits (n = 3)
1001011
....nnn
#+begin_src C
  ~(~0 << n)
#+end_src


First step is to shift right
1001011-+
 \\\\\\ |
 100101 |
1 <-----+

To calculate the next step, we need to determine the word length on our machine.
We can then use this to calculate the offset in bits.

1000000


Note, the following is copied from the C Answer book. I'm not really sure what the
logic behind it is. It still returns errors -> due to the way that wordlength is used
the rightmost n bits are shifted way out to the leftmost end (31 positions left). 

#+begin_src C :tangle rightrot_SOLUTION_MANUAL.c
    /* rightrot: return the value of the integer x rotated to the right by n bits */
  #define _GNU_SOURCE
  #include <unistd.h>
  #include <stdio.h>
  #include <stdlib.h>

  /* wordlength: compute the wordlength of the machine */
  int wordlength(void)
  {
          int i;
          unsigned v = (unsigned) ~0; /* this sets up a positive 1 bit */

          for (i = 1; (v = v >> 1) > 0; i++)
                 ;
          return i;
  }


  int rightrot(int x, int n)
    {
            int wordlength(void);
            int rbit;            /* rightmost bit */

            while (n-- > 0) {
                    rbit = (x & 1) << (wordlength() - 1);
                    x = x >> 1;           /* shift x 1 position right */
                    x = x | rbit;         /* complete one rotation */
            }
            return x;
    }


  int main(int argc, char* argv[])
  {
          int x, n;
          if (argc != 3) {
                  printf("Usage: rightrot <x> <n>\n");
          }
          if (argc == 3) {
                  x = atoi(argv[1]);
                  n = atoi(argv[2]);
                  x = rightrot(x, n);
                  printf("%d\n", x);
          }
          exit(EXIT_SUCCESS);
  }
#+end_src

