* Computer Systems A Programmer's Perspective, 32 bit asm control structures


** Practice problem 3.13 (csapp)

Consider the block
#+name: compfun
#+begin_src C :session :noweb yes
  int comp(data_t a, data_t b) {
          return a COMP b;
  }
#+end_src

#+name: mainfun
#+begin_src C :session :noweb yes
  int main(int argc, char **argv){
        data_t a = 0;
        data_t b = 0;
        comp(a, b);
        exit(0);
      }
#+end_src

Assume that we can define src_C{data_t} with a src_C{typedef} declaration and the comparison
src_C{COMP} with a src_C{#define} declaration.

Suppose src_C{a} is in src_asm{%edx} and src_C{b} is in src_asm{%eax}. For each of the following
instruciton sequences, determine which data types src_C{data_t} and which comparisons src_C{COMP}
could cause the compiler to generate this code. (There can be multiple correct answers; list them all)

See also the table in [[id:df4c2469-1c33-4524-b75a-4a504f7e5999][c types]] 

*** Control example

#+begin_src C :noweb yes :tangle src/control.c
  #include "stdlib.h"
  typedef int data_t;
  # define COMP <

  <<compfun>>

  <<mainfun>>
#+end_src

*** A
#+begin_src asm
  cmpl    %eax, %edx
  setl    %al
#+end_src

#+begin_src C :noweb yes :tangle src/A.c
  #include "stdlib.h"

  typedef long data_t;  
  # define COMP <

  <<compfun>>
  
  <<mainfun>>
#+end_src

*** B
#+begin_src asm
  cmpw  %ax, %dx
  setge %al
#+end_src

#+begin_src C :noweb yes :tangle src/B.c
  #include "stdlib.h"

  typedef short data_t;
  #define COMP >=

  <<compfun>>

  <<mainfun>>
#+end_src


*** C

#+begin_src asm
  cmpb %al, %dl
  setb %al
#+end_src

#+begin_src C :noweb yes :tangle src/C.c
  #include "stdlib.h"

  typedef unsigned char data_t;
  #define COMP <

  <<compfun>>

  <<mainfun>>
#+end_src


#+begin_src C :noweb yes :tangle src/C2.c
  #include "stdlib.h"

  typedef _Bool data_t;
  #define COMP <

  <<compfun>>

  <<mainfun>>
#+end_src


#+begin_src C :noweb yes :tangle src/C3.c
  #include "stdlib.h"

  typedef unsigned char data_t;
  #define COMP <

  <<compfun>>

  <<mainfun>>
#+end_src

*** D

#+begin_src asm
  cmpl    %eax, %edx
  setne   %al
#+end_src



#+begin_src C :noweb yes :tangle src/D.c
  #include "stdlib.h"

  typedef long data_t;
  #define COMP !=

  <<compfun>>

  <<mainfun>>
#+end_src


#+begin_src C :noweb yes :tangle src/D2.c
  #include "stdlib.h"

  typedef unsigned long data_t;
  #define COMP !=

  <<compfun>>

  <<mainfun>>
#+end_src


** Practice problem 3.14 (csapp)

Consider
#+name: testfun
#+begin_src C :session :noweb yes
  int test(data_t a) {
        return a TEST 0;
      }
#+end_src

This shows a general comparison between argument a and 0, where we can set the data type
of the argument by declaring src_C{data_t} with a src_C{typedef}, and the nature of the
comparison by declaring src_C{TEST} with a src_C{#define} declaration. For each of the
following instruction sequences, determine which data types src_C{data_t} and which
comparisons src_C{TEST} could cause the compiler to generate this code. (There can be
multiple correct answers; list all the correct ones).


*** A

#+begin_src asm
  testl  %eax, %eax
  setne  %al
#+end_src

#+begin_src C  :noweb yes :main no :tangle src/test_A.c
  typedef long data_t;
  # define TEST !=

  <<testfun>>
#+end_src


#+begin_src C  :noweb yes :main no :tangle src/test_A2.c
  typedef int data_t;
  # define TEST !=

  <<testfun>>
#+end_src



#+begin_src C  :noweb yes :main no :tangle src/test_A3.c
  typedef int* data_t;
  # define TEST !=

  <<testfun>>
#+end_src


*** B
#+begin_src asm
  testw %ax, %ax
  sete
#+end_src


#+begin_src C  :noweb yes :main no :tangle src/test_B.c
  typedef short data_t;
  # define TEST ==

  <<testfun>>
#+end_src


#+begin_src C  :noweb yes :main no :tangle src/test_B2.c
  typedef unsigned short data_t;
  # define TEST ==

  <<testfun>>
#+end_src


*** C

#+begin_src asm
  testb  %al, %al
  setg   %al
#+end_src



#+begin_src C  :noweb yes :main no :tangle src/test_C.c
  typedef char data_t;
  # define TEST >

  <<testfun>>
#+end_src


